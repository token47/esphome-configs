# This board has 1 leds, and it is controllable (status_led)

# switch to a shared status led so we can use it for decoding tests
status_led: !remove
light:
  - platform: status_led
    id: shared_status_led
    name: "Shared Status LED"
    pin:
      number: GPIO13
      mode: OUTPUT
      inverted: True

# A bunch of text sensors to show the RF code on the web interface
text_sensor:
  - platform: template
    id: rf_sync_data
    name: "Last RF Code - sync 0x0000"
  - platform: template
    id: rf_low_data
    name: "Last RF Code - low 0x0000" 
  - platform: template
    id: rf_high_data
    name: "Last RF Code - high 0x0000"
  - platform: template
    id: rf_code_data
    name: "Last RF Code - code 0x000000"

rf_bridge:
  # no need to !extend on this one, just add/override
  on_code_received:
    then:
      - text_sensor.template.publish:
          id: rf_sync_data
          state: !lambda 'char buffer [10]; return itoa(data.sync,buffer,16);'
      - text_sensor.template.publish:
          id: rf_low_data
          state: !lambda 'char buffer [10]; return itoa(data.low,buffer,16);'
      - text_sensor.template.publish:
          id: rf_high_data
          state: !lambda 'char buffer [10]; return itoa(data.high,buffer,16);'
      - text_sensor.template.publish:
          id: rf_code_data
          state: !lambda 'char buffer [10]; return itoa(data.code,buffer,16);'      
      #- if:
      #    condition:
      #      lambda: |-
      #        return data.code == 0x91EE96E;
      #    then:
      #      - light.toggle: shared_status_led


binary_sensor:
  - id: !extend push_button
    on_press:
      then:
        # only works if you are using the Portisch firmware, otherwise ignored
        - rf_bridge.beep:
            duration: 500
